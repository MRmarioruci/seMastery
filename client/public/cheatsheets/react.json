{
	"collectionName": "reactCheatsheet",
	"title": "React.js",
	"icon": "https://api.iconify.design/logos:react.svg",
	"color": "00D8FF",
	"groups": [
		{
			"title": "General",
			"docs": [
				{
					"title": "What is React and how does it work?",
					"description": "React is a JavaScript library for building user interfaces using a virtual DOM. Commonly used for creating interactive and dynamic web applications.",
					"code": ""
				},
				{
					"title": "Pros of React",
					"description": "<ul><li><strong>Component-Based:</strong> React uses a component-based architecture that promotes reusability and maintainability.</li><li><strong>Virtual DOM:</strong> React's Virtual DOM minimizes DOM manipulation, improving performance and efficiency.</li><li><strong>Declarative:</strong> React's declarative syntax makes it easier to describe how a UI should look based on state.</li><li><strong>Large Community:</strong> React has a vast and active community with a wealth of resources and third-party libraries.</li><li><strong>React Hooks:</strong> React Hooks simplify state and lifecycle management in functional components.</li></ul>",
					"code": ""
				},
				{
					"title": "Cons of React",
					"description": " <li><strong>Learning Curve:</strong> React has a learning curve, especially for beginners, due to its component-based architecture and JSX syntax.</li><li><strong>Boilerplate:</strong> React projects may require additional setup and boilerplate code, which can be time-consuming.</li><li><strong>Complex State Management:</strong> For complex state management, you might need to integrate external libraries like Redux, adding complexity to the project.</li><li><strong>SEO Challenges:</strong> React applications may require extra effort for search engine optimization (SEO) because search engines may not fully index client-rendered content.</li><li><strong>Tooling Choices:</strong> The React ecosystem offers various tools and libraries, which can be overwhelming when making choices for routing, state management, and other aspects of development.</li>",
					"code": ""
				},
				{
					"title": "What are React components?",
					"description": "React components are the building blocks of a React application. They are reusable, self-contained, and encapsulate a piece of user interface (UI) or functionality within a web application",
					"code": ""
				},
				{
					"title": "Class components",
					"description": "Class components in React are a type of React component defined using ES6 classes. They are sometimes referred to as 'stateful' or 'smart' components because they can manage their own internal state.",
					"code": "import React, { Component } from 'react';\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  incrementCount = () => {\n    this.setState({ count: this.state.count + 1 });\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.incrementCount}>Increment</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;"
				},
				{
					"title": "Function components",
					"description": "Function components in React are a type of component that are defined as JavaScript functions. They are sometimes referred to as 'stateless' or 'dumb' components because they don't manage their own internal state. Function components have become increasingly popular in React development, especially after the introduction of React Hooks in React 16.8.",
					"code": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const incrementCount = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={incrementCount}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;"
				},
				{
					"title": "What is JSX and why is it used in React?",
					"description": "JSX is a syntax extension for JavaScript that allows React components to be written in a familiar HTML-like syntax.",
					"code": ""
				},
				{
					"title": "What are React Hooks and how do they work?",
					"description": "React Hooks are a set of functions introduced in React 16.8 that allow you to use state and other React features(Lifecycle methods) in functional components.",
					"code": ""
				},
				{
					"title": "What is the purpose of using React Router?",
					"description": "React Router is used for declarative routing and navigation in React applications.",
					"code": ""
				},
				{
					"title": "What is Redux and how does it work with React?",
					"description": "Redux is a state management library that works with React to manage global state. It provides a predictable and centralized way to manage the state of an application, making it easier to handle complex data flow and state changes in large-scale applications.",
					"code": ""
				},
				{
					"title": "What are some best practices for performance optimization in React?",
					"description": "Minimizing unnecessary re-renders, using memoization, code-splitting and optimizing network requests.",
					"code": ""
				},
				{
					"title": "What is the Virtual DOM and how does it work?",
					"description": "The Virtial DOM is a lightweight in-memory representation of the actual DOM. When the state of a component changes, React compares the virtual DOM with the actual DOM and only makes changes to the actual DOM wherever necessary. More efficient than re-rendering the whole page.",
					"code": ""
				},
				{
					"title": "Higher Order Components",
					"description": "Components that wrap other components to add additional functionality. Allow for abstraction and reusability.",
					"code": "import React, { Component } from 'react';\n\n// This is a Higher Order Component (HOC)\nconst withLogger = (WrappedComponent) => {\n  class Logger extends Component {\n    componentDidMount() {\n      console.log(`Component ${WrappedComponent.name} is mounted.`);\n    }\n\n    render() {\n      // Pass all props to the wrapped component\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return Logger;\n};\n\n// A simple component\nconst Greeting = ({ name }) => <div>Hello, {name}!</div>;\n\n// Wrap the Greeting component with the withLogger HOC\nconst GreetingWithLogger = withLogger(Greeting);\n\n// Now, you can use GreetingWithLogger just like any other component\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <GreetingWithLogger name=\"John\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"
				}
			]
		},
		{
			"title": "Hooks",
			"docs": [
				{
					"title": "useState",
					"code": "const [counter, setCounter] = useState(0);\n\nreturn (\n  <div>\n    <p>Counter: {counter}</p>\n    <button onClick={() => setCounter(counter + 1)}>\n      Increment\n    </button>\n  </div>\n);",
					"description": "Used for managing state variables in functional components."
				},
				{
					"title": "useEffect",
					"code": "useEffect(() => {\n  // perform side effects here\n});",
					"description": "Allows you to perform side effects in your components, such as data fetching or DOM manipulation, after rendering or when subscribing to a dependency/"
				},
				{
					"title": "useContext",
					"code": "const { user } = useContext(UserContext);\n\nreturn (\n  <div>\n    <p>User: {user.name}</p>\n  </div>\n);",
					"description": "Provides access to the context object created by the React.createContext API, allowing you to share data across the component tree."
				},
				{
					"title": "useReducer",
					"code": "const initialState = { count: 0 };\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n};\n\nconst [state, dispatch] = useReducer(reducer, initialState);\n\nreturn (\n  <div>\n    <p>Count: {state.count}</p>\n    <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\n    <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\n  </div>\n);",
					"description": "A more advanced state management hook that is often used when state transitions are complex or involve multiple sub-states."
				},
				{
					"title": "useRef",
					"code": "import React, { useRef, useState } from 'react';\nfunction RefExample() {\n  // Create a ref\n  const inputRef = useRef(null);\n  const handleFocus = () => {\n    // Access and focus the input element\n    inputRef.current.focus();\n  };\n  return (\n    <div>\n      <input ref={inputRef} type='text' />\n      <button onClick={handleFocus}>Focus Input</button>\n    </div>\n  );\n}\nexport default RefExample;",
					"description": "Used for creating mutable refs to access and interact with DOM elements or to persist values across renders without causing re-renders."
				},
				{
					"title": "useCallback",
					"code": "const memoizedCallback = useCallback(\n  () => {\n    // do something\n  }, [dependencies]\n);",
					"description": "Similar to useMemo, but it memoizes functions to prevent unnecessary re-renders when the function's dependencies haven't changed."
				},
				{
					"title": "useMemo",
					"code": "const memoizedValue = useMemo(\n  () => {\n    // calculate expensive value\n  }, [dependencies]\n);",
					"description": "Helps with memoization by memoizing the result of a function so that it's not recomputed on every render unless its dependencies change."
				},
				{
					"title": "useLayoutEffect",
					"code": "useLayoutEffect(() => {\n  // perform synchronous DOM mutations here\n});",
					"description": "Similar to useEffect, but it fires synchronously after all DOM mutations. It's often used for measurements and other tasks that require immediate DOM updates."
				},
				{
					"title": "useEffectWithCleanup",
					"code": "useEffect(() => { \n // This effect runs after every render \n console.log('Effect ran!'); \n \n // Cleanup function - this runs before the next effect or unmount \n return () => { \n console.log('Cleanup ran!'); \n };});",
					"description": "A pattern that combines useEffect with a cleanup function to manage side effects and prevent memory leaks."
				},
				{
					"title": "useImperativeHandle",
					"code": "const ChildComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    // expose child component's imperative API here\n  }));\n  return <div>Child Component</div>;\n});\n\nconst ParentComponent = () => {\n  const childRef = useRef();\n  // call child component's imperative API here\n  return <ChildComponent ref={childRef} />;\n};",
					"description": "Used to customize the instance value that is exposed when using React.forwardRef."
				},
				{
					"title": "useDebugValue",
					"code": "useDebugValue(formattedValue)",
					"description": "Displays custom debugging information in React DevTools."
				}
			]
		},
		{
			"title": "Extra",
			"docs": [
				{
					"title": "What is prop drilling in React?",
					"code": "",
					"description": "In React, 'prop drilling' refers to the process of passing data (props) from a higher-level component down to a lower-level component through intermediate components that do not actually need the data. "
				},
				{
					"title": "What is the Context API in React and how is it used?",
					"code": "",
					"description": "The Context API in React is a mechanism for sharing state and providing a way to pass data through the component tree without having to pass props manually at every level. "
				},
				{
					"title": "What is the difference between state and props in React?",
					"code": "",
					"description": "State is used for managing internal component state, while props are used for passing data between components."
				},
				{
					"title": "What are higher-order components (HOCs) in React?",
					"code": "",
					"description": "Functions that take a component and return a new component with additional functionality."
				},
				{
					"title": "What is the difference between a controlled and an uncontrolled component in React?",
					"code": "",
					"description": "A controlled component has its state managed by React, while an uncontrolled component manages its own state."
				},
				{
					"title": "What is server-side rendering in React?",
					"code": "",
					"description": "Rendering React components on the server and sending HTML to the client for faster initial load times and improved SEO."
				},
				{
					"title": "What is the purpose of the shouldComponentUpdate lifecycle method in React?",
					"code": "",
					"description": "To optimize performance by preventing unnecessary re-renders of a component."
				},
				{
					"title": "What is the significance of the key prop in React?",
					"code": "",
					"description": "A unique identifier used by React to optimize rendering performance when working with lists of components."
				}
			]
		},
		{
			"title": "Redux setup",
			"docs": [
				{
					"title": "1. Install",
					"code": "npm install redux react-redux",
					"description": "To get started with Redux, you'll need to install both the Redux library and the React bindings for Redux (react-redux)"
				},
				{
					"title": "2. Reducer Setup",
					"code": "// src/state/reducers/userReducer.js \nconst userReducer = (state = {}, action) => {\n switch (action.type) {  \n// Handle user-related actions here \n default: \n  return state; \n } \n}; \nexport default userReducer;",
					"description": "In Redux, reducers specify how your application's state changes in response to actions. Begin by creating individual reducers for different parts of your application's state. Here's an example of two reducers:"
				},
				{
					"title": "3. Combine Reducers",
					"code": "import { combineReducers } from 'redux';\nuserReducer from './userReducer';\ncartReducer from './cartReducer';\nconst rootReducer = combineReducers({\n  user: userReducer,\n  cart: cartReducer,\n  // Add more reducers here if needed\n});\nexport default rootReducer;",
					"description": "The setup follows a combined reducers structure to mirror a more realistic production environment with multiple reducers and actions based on sections of your application. To manage these individual reducers in your Redux store, create a root reducer by using Redux's combineReducers function:"
				},
				{
					"title": "4. Actions",
					"code": "export const updateUser = (userData) => ({\n  type: 'UPDATE_USER',\n  payload: userData,\n});",
					"description": "Actions are payloads of information that send data from your application to your store. Define action types and action creators to describe what should happen in your application."
				},
				{
					"title": "5. Store",
					"code": "import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // Optional\n);\n\nexport default store;",
					"description": "In your store.js (or equivalent) file, create the Redux store using the combined root reducer and set up Redux DevTools for easier debugging:"
				},
				{
					"title": "6. Configure the Redux Store and Wrap the Application",
					"code": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './state/store'; // Import your Redux store\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);",
					"description": "In your index.js file wrap the application with the react-redux Provider."
				},
				{
					"title": "7. Use in your components",
					"code": "import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateUser } from '../redux/actions/userActions'; // Import your Redux action\n\nconst UserProfile = () => {\n  // Use useSelector to access the user state from Redux\n  const user = useSelector((state) => state.user);\n\n  // Use useDispatch to get the dispatch function\n  const dispatch = useDispatch();\n\n  const [newName, setNewName] = useState('');\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleUpdateUser = () => {\n    // Dispatch the updateUser action to update the user state in Redux\n    dispatch(updateUser({ name: newName }));\n    setNewName('');\n  };\n\n  return (\n    <div>\n      <h2>User Profile</h2>\n      <p>Name: {user.name}</p>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter new name\"\n          value={newName}\n          onChange={handleNameChange}\n        />\n        <button onClick={handleUpdateUser}>Update Name</button>\n      </div>\n    </div>\n  );\n};\n\nexport default UserProfile;",
					"description": "Finally you can start using and manipulating the state in your components."
				}
				
			]
		}
	]
}