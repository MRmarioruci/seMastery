{
    "collectionName": "apis",
    "title": "Apis",
    "icon": "",
    "color": "B11C1E",
    "highlighter": "js",
    "groups": [
        {
            "title": "REST Basics",
            "docs": [
                {
                    "title": "What is REST, and what does it stand for?",
                    "description": "REST stands for Representational State Transfer. It is an architectural style for designing networked applications.",
                    "code": ""
                },
                {
                    "title": "What are the key principles of RESTful architecture?",
                    "description": "<ul><li>Stateless: Each request from a client to a server must contain all the information needed to understand and fulfill the request.</li><li>Client-Server: Separation of concerns between the client and the server.</li><li>Uniform Interface: A consistent and uniform way to interact with resources.</li><li>Layered System: Components are organized into layers, and each layer has a specific function.</li></ul>",
                    "code": ""
                },
                {
                    "title": "What is an HTTP method, and what are the commonly used methods in REST?",
                    "description": "HTTP methods are actions that can be performed on resources. Commonly used methods in REST are GET, POST, PUT, DELETE, PATCH, and more.",
                    "code": ""
                },
                {
                    "title": "What is a resource in the context of REST?",
                    "description": "A resource is any data or object that can be accessed via a URI (Uniform Resource Identifier). Resources are the fundamental concept in RESTful APIs.",
                    "code": ""
                },
                {
                    "title": "What is the purpose of HTTP status codes in RESTful APIs?",
                    "description": "HTTP status codes indicate the result of an HTTP request. For example, 200 OK indicates success, 404 Not Found indicates the resource doesn't exist, and 500 Internal Server Error indicates a server-side issue.",
                    "code": ""
                },
                {
                    "title": "What is the difference between authentication and authorization in the context of RESTful APIs?",
                    "description": "Authentication is the process of verifying the identity of a user or system, while authorization is the process of determining what actions a user or system is allowed to perform.",
                    "code": ""
                },
                {
                    "title": "What is CORS, and why is it important in RESTful APIs?",
                    "description": "CORS (Cross-Origin Resource Sharing) is a security feature that controls which domains can access resources on a web page. It's important in RESTful APIs to prevent unauthorized access from different origins.",
                    "code": ""
                },
                {
                    "title": "What is the purpose of API versioning, and what are some common versioning strategies?",
                    "description": "API versioning allows for changes in the API while maintaining backward compatibility. Common versioning strategies include using URL versioning (e.g., /v1/resource), custom request headers, or using content negotiation.",
                    "code": ""
                }
            ]
        },
        {
            "title": "REST HTTP Methods",
            "docs": [
                {
                    "title": "GET",
                    "description": "This method is used to retrieve data from the server (Get data). It should not have any side effects on the server's state, meaning it's a safe and idempotent operation.",
                    "code": "fetch('/api/resource', { method: 'GET' })\n.then(response => response.json())\n.then(data => console.log(data))"
                },
                {
                    "title": "POST",
                    "description": "POST is used to submit data to be processed to a specified resource (Add data). It often results in the creation of a new resource on the server and may have side effects.",
                    "code": "fetch('/api/resource', { method: 'POST', body: JSON.stringify({ key: 'value' }), headers: { 'Content-Type': 'application/json' } })\n.then(response => response.json())\n.then(data => console.log(data))"
                },
                {
                    "title": "PUT",
                    "description": "PUT is used to update a resource or create it if it doesn't exist at the specified URI (Full update). It replaces the entire resource with the new representation provided.",
                    "code": "fetch('/api/resource', { method: 'PUT', body: JSON.stringify({ key: 'new-value' }), headers: { 'Content-Type': 'application/json' } })\n.then(response => response.json())\n.then(data => console.log(data))"
                },
                {
                    "title": "PATCH",
                    "description": "PATCH is used to apply partial modifications to a resource (Partial update). It's typically used when you want to update a resource with only the changes provided in the request.",
                    "code": "fetch('/api/resource', { method: 'PATCH', body: JSON.stringify({ key: 'updated-value' }), headers: { 'Content-Type': 'application/json' } })\n.then(response => response.json())\n.then(data => console.log(data))"
                },
                {
                    "title": "DELETE",
                    "description": "DELETE is used to remove a resource from the server (Remove data). It should be used to delete the resource at the specified URI.",
                    "code": "fetch('/api/resource', { method: 'DELETE' })\n.then(response => response.json())\n.then(data => console.log(data))"
                },
                {
                    "title": "OPTIONS",
                    "description": "OPTIONS is used to describe the communication options for the target resource. It can be used to retrieve information about the communication options available for a resource, such as supported HTTP methods or CORS information.",
                    "code": ""
                },
                {
                    "title": "HEAD",
                    "description": "HEAD is similar to GET but requests the headers of the resource, not the actual data. It's often used to check the status of a resource without downloading its content.",
                    "code": ""
                },
                {
                    "title": "CONNECT",
                    "description": "CONNECT is typically used for establishing network connections to a resource. It's mainly used for HTTP tunneling through proxies.",
                    "code": ""
                },
                {
                    "title": "TRACE",
                    "description": "TRACE is used to retrieve diagnostic information about the server's processing of the request. It's not commonly used in practice and is often disabled for security reasons.",
                    "code": ""
                }
            ]
        }
    ]
}
