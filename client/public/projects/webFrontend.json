{
    "collectionName": "webFrontend",
    "title": "Web Frontend Master",
    "icon": "https://api.iconify.design/noto:paintbrush.svg",
    "color": "CB66A3",
    "highlighter": "js",
    "groups": [
        {
            "title": "Junior",
            "docs": [
                {
                    "title": "Personal Portfolio Website",
                    "description": "Create a personal portfolio website to showcase your projects and skills. Include sections for an about me, projects, skills, and contact information.",
                    "technologies": "HTML, CSS, JavaScript",
                    "concepts": "Basic web development, responsive design",
                    "instructions": "<ol><li>Start by designing wireframes and layouts for each section.</li><li>Code the HTML structure, adding semantic tags.</li><li>Apply CSS styles to make it visually appealing and responsive.</li><li>Add JavaScript for interactivity, such as smooth scrolling and hover effects.</li></ol>"
                },
                {
                    "title": "To-Do List Web App",
                    "description": "Build a to-do list application with features like adding, editing, and deleting tasks. Make it user-friendly and visually appealing.",
                    "technologies": "HTML, CSS, JavaScript",
                    "concepts": "DOM manipulation, event handling",
                    "instructions": "<ol><li>Create a structured HTML layout for the app.</li><li>Style it using CSS, focusing on user-friendly design.</li><li>Implement JavaScript for task manipulation (adding, editing, deleting).</li><li>Add event listeners for user interactions and validation.</li></ol>"
                },
                {
                    "title": "Weather App",
                    "description": "Create a weather app that fetches and displays weather information for a user's location, including temperature, humidity, and forecasts.",
                    "technologies": "HTML, CSS, JavaScript, API integration",
                    "concepts": "Working with APIs, asynchronous programming",
                    "instructions": "<ol><li>Choose a weather API (e.g., OpenWeatherMap).</li><li>Build a simple HTML layout for displaying weather information.</li><li>Use JavaScript to make API requests and update the UI dynamically.</li><li>Add geolocation to automatically detect the user's location.</li></ol>"
                },
                {
                    "title": "Simple Blog",
                    "description": "Develop a basic blog platform where users can read and create blog posts. Include features like adding, editing, and deleting posts.",
                    "technologies": "HTML, CSS, JavaScript",
                    "concepts": "CRUD operations, JSON data handling",
                    "instructions": "<ol><li>Create HTML templates for displaying blog posts and forms for creating/editing posts.</li><li>Use JavaScript to handle CRUD operations and update the JSON data.</li><li>Implement validation and error handling for the forms.</li></ol>"
                },
                {
                    "title": "Interactive Quiz Game",
                    "description": "Build a quiz game with multiple-choice questions and a scoring system. Include a timer for each question.",
                    "technologies": "HTML, CSS, JavaScript",
                    "concepts": "Conditional statements, score tracking",
                    "instructions": "<ol><li>Design a quiz layout with questions and answer choices.</li><li>Use JavaScript to display questions one at a time and handle user responses.</li><li>Implement a timer for each question.</li><li>Calculate and display the user's score at the end.</li></ol>"
                }
            ]
        },
        {
            "title": "Mid",
            "docs": [
                {
                    "title": "E-commerce Website",
                    "description": "Develop an e-commerce platform with product listings, a shopping cart, and checkout functionality. Implement user accounts and order history.",
                    "technologies": "HTML, CSS, JavaScript, React.js",
                    "concepts": "React components, state management",
                    "instructions": "<ol><li>Create a React app structure with components for product listings, cart, and user profile.</li><li>Implement state management for cart items and user authentication.</li><li>Add a checkout process with payment processing.</li></ol>"
                },
                {
                    "title": "Social Media Dashboard",
                    "description": "Create a social media dashboard that aggregates data from various social platforms (e.g., Twitter, Instagram). Display user metrics, trends, and posts.",
                    "technologies": "HTML, CSS, JavaScript, React.js, APIs",
                    "concepts": "API integration, data visualization",
                    "instructions": "<ol><li>Build React components for each social platform's data.</li><li>Fetch data from social media APIs and display it in charts and graphs.</li><li>Implement user authentication for accessing personal data.</li></ol>"
                },
                {
                    "title": "User Authentication System",
                    "description": "Develop a user authentication system with features like registration, login, password reset, and email verification. Use JWT for token-based authentication.",
                    "technologies": "HTML, CSS, JavaScript, React.js",
                    "concepts": "User authentication, frontend validation",
                    "instructions": "<ol><li>Create React forms for registration, login, and password reset.</li><li>Implement JWT for secure authentication.</li><li>Add frontend validation and error handling for user interactions.</li></ol>"
                },
                {
                    "title": "Real-time Chat Application",
                    "description": "Build a chat application that allows users to chat in real-time. Include features like private messaging, typing indicators, and notifications.",
                    "technologies": "HTML, CSS, JavaScript, React.js, WebSocket",
                    "concepts": "WebSocket communication, real-time updates",
                    "instructions": "<ol><li>Create a React-based frontend with components for chat rooms and private messages.</li><li>Set up a WebSocket server for real-time communication.</li><li>Implement user authentication and private messaging features.</li><li>Add real-time notifications.</li></ol>"
                },
                {
                    "title": "Task Management System",
                    "description": "Develop a task management system with features like task creation, assignment, deadlines, and priority levels. Include a dashboard for tracking tasks.",
                    "technologies": "HTML, CSS, JavaScript, React.js, Node.js",
                    "concepts": "CRUD operations, project management",
                    "instructions": "<ol><li>Create React components for task lists, task creation, and task details.</li><li>Set up a Node.js backend for task storage.</li><li>Implement task assignment, deadlines, and priority levels.</li><li>Build a dashboard for users to track and manage their tasks.</li></ol>"
                }
            ]
        },
        {
            "title": "Senior",
            "docs": [
                {
                    "title": "Content Management System (CMS)",
                    "description": "Create a CMS for managing website content, including articles, images, and user roles. Implement role-based access control (admin, editor, contributor).",
                    "technologies": "HTML, CSS, JavaScript, React.js",
                    "concepts": "Role-based access control, content management",
                    "instructions": "<ol><li>Design a user-friendly admin interface for content management.</li><li>Implement user roles and permissions.</li><li>Use React for building the frontend and focus on frontend-related tasks.</li><li>Add features for creating, editing, and publishing content.</li></ol>"
                },
                {
                    "title": "E-commerce Platform Enhancement",
                    "description": "Enhance your e-commerce platform with advanced features like product reviews, recommendations, and payment gateways. Implement user-generated content.",
                    "technologies": "HTML, CSS, JavaScript, React.js",
                    "concepts": "Payment processing, user-generated content",
                    "instructions": "<ol><li>Add advanced frontend features such as product reviews, recommendations, and user-generated content.</li></ol>"
                },
                {
                    "title": "Progressive Web App (PWA)",
                    "description": "Convert an existing web application into a Progressive Web App that works offline. Implement caching strategies for assets and data.",
                    "technologies": "HTML, CSS, JavaScript, React.js, Service Workers",
                    "concepts": "PWA development, offline caching",
                    "instructions": "<ol><li>Focus on frontend tasks such as adding service workers to cache assets, enable offline functionality, and manifest files to make your app installable on users' devices.</li></ol>"
                },
                {
                    "title": "Data Visualization Dashboard",
                    "description": "Build a data visualization dashboard that displays real-time data from multiple sources. Include interactive charts and graphs.",
                    "technologies": "HTML, CSS, JavaScript, React.js",
                    "concepts": "Data visualization, real-time data updates",
                    "instructions": "<ol><li>Create interactive frontend components for data visualization.</li><li>Display data in real-time using frontend technologies.</li></ol>"
                },
                {
                    "title": "Full-Stack Blog Platform",
                    "description": "Create a full-stack blog platform with advanced features like comments, user profiles, and rich text editing. Use Markdown for content formatting.",
                    "technologies": "HTML, CSS, JavaScript, React.js, Node.js",
                    "concepts": "User-generated content, rich text editing",
                    "instructions": "<ol><li>Focus on frontend features such as user profiles, comments, and rich text editing using frontend technologies.</li></ol>"
                }
            ]
        },
        {
            "title": "Jedi",
            "docs": [
                {
                    "title": "Machine Learning Integration",
                    "description": "Integrate machine learning models into your web application to provide personalized recommendations or predictions.",
                    "technologies": "HTML, CSS, JavaScript, React.js",
                    "concepts": "Machine learning integration, model deployment",
                    "instructions": "<ol><li>Integrate machine learning models into the frontend of your web application to provide personalized recommendations or predictions.</li></ol>"
                },
                {
                    "title": "Blockchain-Based Application",
                    "description": "Develop a decentralized application (DApp) using blockchain technology for data storage or smart contracts.",
                    "technologies": "HTML, CSS, JavaScript, React.js",
                    "concepts": "Blockchain development, smart contracts",
                    "instructions": "<ol><li>Focus on frontend development for your blockchain-based DApp, including building the user interface using React.js.</li></ol>"
                }
            ]
        }
    ]
}
